import java.util.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.*;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.yarn.webapp.hamlet.HamletSpec;


/**
 * Created by hou on 2016/4/10.
 */
class HDFStest{
    ArrayList<String[]> Read(String fileName) throws IOException,URISyntaxException{
        String filePath="hdfs://localhost:9000/"+fileName;
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(filePath), conf);
        Path path = new Path(filePath);
        FSDataInputStream in_stream = fs.open(path);
        BufferedReader in = new BufferedReader(new InputStreamReader(in_stream));
        String s;
        ArrayList <String[]> Table =new ArrayList<>();
        String []strTuple ;
        while ((s=in.readLine())!=null) {
            strTuple= s.split("|");
            Table.add(strTuple);
        }
        in.close();
        fs.close();
        System.out.println("read "+fileName+" successfully");
        return Table;
    }
}
class  HBaseOperate{
    private String tableName;
    private Configuration configuration;
    boolean create(String name) throws IOException {
        tableName =name;
        // create table descriptor
        HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(tableName));
        // create column descriptor
        HColumnDescriptor cf = new HColumnDescriptor("res");
        htd.addFamily(cf);
        // configure HBase
        configuration = HBaseConfiguration.create();
        HBaseAdmin hAdmin = new HBaseAdmin(configuration);
        if(hAdmin.tableExists(tableName)){
            hAdmin.disableTable(tableName);
            hAdmin.deleteTable(tableName);
        }
        else {
            hAdmin.createTable(htd);
        }
        hAdmin.close();
        return  true;
    }
    boolean Write(LinkedList<String []> set_R,String []S,Operate op,int same_raw) throws  IOException {
        String suffix ="";
        // put "mytable","abc","mycf:a","789"
        HTable table = new HTable(configuration,tableName);

        Put put = new Put(S[op.join_S].getBytes());
        op.project = op.project.substring(4);
        String [] column = op.project.split(",");
        for (String[] set_ : set_R) {
            for(String c:column){
                int column_num = Integer.parseInt(c.substring(1));
                if(same_raw!=0)
                    suffix = "."+same_raw;
                if(c.charAt(0)=='R')
                    put.add("res".getBytes(),(c+suffix).getBytes(),set_[column_num].getBytes());
                else
                    put.add("res".getBytes(),(c+suffix).getBytes(),S[column_num].getBytes());
            }
            same_raw++;
        }
        table.put(put);
        table.close();
        System.out.println("put successfully");
        return true;
    }
}
class Operate{
    String R_path,S_path;
    int join_R,join_S;
    String project;
    Operate(String args[]) {
//        System.out.println(args.length+" "+args[0]);
        R_path = args[0].substring(3);
        S_path = args[1].substring(3);
        this.join_R = Integer.parseInt(args[2].substring(6).split("=S")[0]);
        this.join_S = Integer.parseInt(args[2].substring(6).split("=S")[1]);
        this.project = args[3].substring(4);
    }

}
public class Hw1Grp1 {
    public  static void  main(String args[])throws IOException,URISyntaxException
    {
        Operate op =new Operate(args);
        HDFStest ht =new HDFStest();
        HBaseOperate hbo =new HBaseOperate();
        hbo.create("Result");

        ArrayList<String []> R = ht.Read(op.R_path);
        ArrayList<String []> S = ht.Read(op.S_path);
        //sort R,S
        sort_array(R,op.join_R);
        sort_array(S,op.join_S);
        //R merge join S
        int i =0,j =0,same_raw =0;
        LinkedList<String []> set_s =new LinkedList<>();
        while(i < R.size() && j < S.size())
        {
            set_s.clear();
            set_s.add(R.get(i));
            String compareStr = R.get(i)[op.join_R];
            i++;
            same_raw =0; //same join key
            while(i <R.size()-1)
            {
                if (R.get(i)[op.join_R].equals(compareStr) ) {
                    i++;
                    set_s.add(R.get(i));
                }
                else break;
            }
            while(j<S.size() && compareStr.compareTo(S.get(j)[op.join_S])>0)
            {
                j++;
            }
            while(j<S.size() && compareStr.compareTo(S.get(j)[op.join_S])==0)
            {
                hbo.Write(set_s, set_s.get(j),op,same_raw);
                same_raw+=set_s.size();
            }
        }
    }
    private static void sort_array(ArrayList<String[]> list, final int column)
    {
        Collections.sort(list, new Comparator<String []>(){
            public int compare(String[] o1, String[] o2) {
                return o1[column].compareTo(o2[column]);
            }
        });
    }
}
